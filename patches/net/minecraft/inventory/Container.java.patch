--- ../net/minecraft/inventory/Container.java
+++ ../net/minecraft/inventory/Container.java
@@ -6,9 +6,20 @@
 import java.util.List;
 import java.util.Set;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.MathHelper;
+
+// CraftBukkit start
+import java.util.HashMap;
+import java.util.Map;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.Event.Result;
+import org.bukkit.event.inventory.InventoryDragEvent;
+import org.bukkit.inventory.InventoryView;
+// CraftBukkit end
 
 public abstract class Container
 {
@@ -17,16 +28,31 @@
     public int field_75152_c = 0;
     private short field_75150_e = 0;
     private int field_94535_f = -1;
-    private int field_94536_g = 0;
+    public int field_94536_g = 0; // CraftBukkit - private -> public
     private final Set field_94537_h = new HashSet();
     protected List field_75149_d = new ArrayList();
     private Set field_75148_f = new HashSet();
 
+    // CraftBukkit start
+    public boolean checkReachable = true;
+    public abstract InventoryView getBukkitView();
+    public void transferTo(Container other, org.bukkit.craftbukkit.entity.CraftHumanEntity player)
+    {
+        InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
+        ((CraftInventory) source.getTopInventory()).getInventory().onClose(player);
+        ((CraftInventory) source.getBottomInventory()).getInventory().onClose(player);
+        ((CraftInventory) destination.getTopInventory()).getInventory().onOpen(player);
+        ((CraftInventory) destination.getBottomInventory()).getInventory().onOpen(player);
+    }
+    // CraftBukkit end
+
+    public Container() {}
+
     protected Slot func_75146_a(Slot p_75146_1_)
     {
         p_75146_1_.field_75222_d = this.field_75151_b.size();
         this.field_75151_b.add(p_75146_1_);
-        this.field_75153_a.add((Object)null);
+        this.field_75153_a.add(null);
         return p_75146_1_;
     }
 
@@ -157,6 +183,7 @@
                     itemstack1 = inventoryplayer.func_70445_o().func_77946_l();
                     l = inventoryplayer.func_70445_o().field_77994_a;
                     Iterator iterator = this.field_94537_h.iterator();
+                    Map<Integer, ItemStack> draggedSlots = new HashMap<Integer, ItemStack>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
 
                     while (iterator.hasNext())
                     {
@@ -179,18 +206,55 @@
                             }
 
                             l -= itemstack2.field_77994_a - j1;
-                            slot1.func_75215_d(itemstack2);
-                        }
-                    }
-
-                    itemstack1.field_77994_a = l;
-
-                    if (itemstack1.field_77994_a <= 0)
-                    {
-                        itemstack1 = null;
-                    }
-
-                    inventoryplayer.func_70437_b(itemstack1);
+                            draggedSlots.put(slot1.field_75222_d, itemstack2); // CraftBukkit - Put in map instead of setting, Should be Slot.rawSlotIndex
+                        }
+                    }
+
+                    // CraftBukkit start - InventoryDragEvent
+                    InventoryView view = getBukkitView();
+                    org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack1);
+                    newcursor.setAmount(l);
+                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<Integer, org.bukkit.inventory.ItemStack>();
+
+                    for (Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet())
+                    {
+                        eventmap.put(ditem.getKey(), CraftItemStack.asBukkitCopy(ditem.getValue()));
+                    }
+
+                    // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
+                    ItemStack oldCursor = inventoryplayer.func_70445_o();
+                    inventoryplayer.func_70437_b(CraftItemStack.asNMSCopy(newcursor));
+                    InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.field_94535_f == 1, eventmap); // Should be dragButton
+                    p_75144_4_.field_70170_p.getServer().getPluginManager().callEvent(event);
+                    // Whether or not a change was made to the inventory that requires an update.
+                    boolean needsUpdate = event.getResult() != Result.DEFAULT;
+
+                    if (event.getResult() != Result.DENY)
+                    {
+                        for (Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet())
+                        {
+                            view.setItem(dslot.getKey(), CraftItemStack.asBukkitCopy(dslot.getValue()));
+                        }
+
+                        // The only time the carried item will be set to null is if the inventory is closed by the server.
+                        // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
+                        if (inventoryplayer.func_70445_o() != null)
+                        {
+                            inventoryplayer.func_70437_b(CraftItemStack.asNMSCopy(event.getCursor()));
+                            needsUpdate = true;
+                        }
+                    }
+                    else
+                    {
+                        inventoryplayer.func_70437_b(oldCursor);
+                    }
+
+                    if (needsUpdate && p_75144_4_ instanceof EntityPlayerMP)
+                    {
+                        ((EntityPlayerMP) p_75144_4_).func_71120_a(this);
+                    }
+
+                    // CraftBukkit end
                 }
 
                 this.func_94533_d();
@@ -224,10 +288,17 @@
 
                         if (p_75144_2_ == 1)
                         {
-                            p_75144_4_.func_71021_b(inventoryplayer.func_70445_o().func_77979_a(1));
-
-                            if (inventoryplayer.func_70445_o().field_77994_a == 0)
-                            {
+                            // CraftBukkit start - Store a reference
+                            ItemStack itemstack4 = inventoryplayer.func_70445_o();
+
+                            if (itemstack4.field_77994_a > 0)
+                            {
+                                p_75144_4_.func_71021_b(itemstack4.func_77979_a(1));
+                            }
+
+                            if (itemstack4.field_77994_a == 0)
+                            {
+                                // CraftBukkit end
                                 inventoryplayer.func_70437_b((ItemStack)null);
                             }
                         }
@@ -288,7 +359,13 @@
                                     k1 = slot2.func_75219_a();
                                 }
 
-                                slot2.func_75215_d(itemstack4.func_77979_a(k1));
+                                // CraftBukkit start
+                                if (itemstack4.field_77994_a >= k1)
+                                {
+                                    slot2.func_75215_d(itemstack4.func_77979_a(k1));
+                                }
+
+                                // CraftBukkit end
 
                                 if (itemstack4.field_77994_a == 0)
                                 {
@@ -520,7 +597,7 @@
         }
     }
 
-    public abstract boolean func_75145_c(EntityPlayer entityplayer);
+    public abstract boolean func_75145_c(EntityPlayer entityhuman);
 
     protected boolean func_75135_a(ItemStack p_75135_1_, int p_75135_2_, int p_75135_3_, boolean p_75135_4_)
     {
